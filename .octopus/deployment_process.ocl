step "run-octopus-deploy-runbook" {
    name = "Run Octopus Deploy Runbook"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-22"
            Octopus.Action.Template.Version = "16"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.CustomNotes.Toggle = "False"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident Database"
            Run.Runbook.Project.Name = "Trident"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }
}

step "generate-database-delta-report" {
    name = "Generate Database Delta Report"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $CommandsRequireApproval = $OctopusParameters["Databases.AutoApprove.CommandsRequireApproval"]
                $CommandsIndicatingChange = $OctopusParameters["Databases.AutoApprove.CommandsIndicatingChange"]
                $ReportPath = $OctopusParameters["Databases.AutoApproval.ReportPath"]
                $stepName = $OctopusParameters["Octopus.Action.StepName"]
                Write-Host "The REPORT PATH is $ReportPath"
                Write-Host "Commands requiring approval: $CommandsRequireApproval"
                Write-Host "Octopus indicating changes: $CommandsIndicatingChange"
                Write-Host "Report Path: $ReportPath"
                
                $ApprovalRequired = $false
                $HasDatabaseChanges = $false
                
                $fileContent = Get-Content -path $ReportPath
                
                $commandListToCheck = $CommandsRequireApproval -split ","
                $commandListForChanges = $CommandsIndicatingChange -split ","
                
                    Write-Host "Looping through all commands requiring approval for $ReportPath"
                	foreach ($command in $commandListToCheck)
                    {
                    	Write-Host "Checking $ReportPath for command $command"
                    	$foundCommand = $fileContent -match "$command"
                    
                    	if ($foundCommand)
                        {
                        	Write-Highlight "$ReportPath has the command '$command'"
                            $ApprovalRequired = $true
                            $HasDatabaseChanges = $true
                        }
                    }
                
                    if ($ApprovalRequired -eq $true)
                    {
                        Write-Host "Approval is required, so there has to be changes, skipping over the changes check"
                    }
                    else
                    {
                      Write-Host "Looping through all commands indicating changes for $reportPath"
                      foreach ($command in $commandListForChanges)
                      {
                          Write-Host "Checking $ReportPath for command $command"
                          $foundCommand = $fileContent -match "$command"
                
                          if ($foundCommand)
                          {
                              Write-Highlight "$ReportPath has the command '$command'"
                              $HasDatabaseChanges = $true
                          }
                      }
                    }
                
                
                if ($approvalRequired -eq $false)
                {
                	Write-Highlight "All scripts look good"
                }
                else
                {
                	Write-Highlight "One of the specific commands we look for has been found"
                }
                
                if ($HasDatabaseChanges -eq $false)
                {
                    Write-Highlight "No database changes were detected"
                }
                else
                {
                    Write-Highlight "Database changes have been detected"
                }
                
                Set-OctopusVariable -name "ApprovalRequired" -value $ApprovalRequired
                Write-Host "Variable run conditions: ##{unless Octopus.Deployment.Error}#{Octopus.Action[$stepName].Output.ApprovalRequired}##{/unless}"
                Set-OctopusVariable -name "HasDatabaseChanges" -value $HasDatabaseChanges
                Write-Host "Variable run conditions: ##{unless Octopus.Deployment.Error}#{Octopus.Action[$stepName].Output.HasDatabaseChanges}##{/unless}"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "approve-database-delta-script" {
    name = "Approve Database Delta Script"

    action {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Approve the database delta script found in the artifacts section"
            Octopus.Action.Manual.ResponsibleTeamIds = "dbas,global/octopus-managers"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-the-database-changes" {
    name = "Deploy the Database Changes"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                
                & $appToRun --ConnectionString="$connectionString"
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-connectivity" {
    name = "Verify Connectivity"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.Script"
        is_disabled = true
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Hello World!\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "deploy-trident-web" {
    name = "Deploy Trident Website"
    properties = {
        Octopus.Action.MaxParallelism = "5"
        Octopus.Action.TargetRoles = "trident-web"
    }

    action "remove-from-load-balancer" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Remove from load balancer"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Remove $machineName from the Load Balancer."
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }

    action "deploy-trident-web" {
        action_type = "Octopus.TentaclePackage"
        name = "Deploy Trident.Web"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables,Octopus.Features.ConfigurationVariables,Octopus.Features.ConfigurationTransforms"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appsettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }

    action "add-to-load-balancer" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Add to load balancer"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Adding $machineName to the Load Balancer."
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "send-an-email" {
    condition = "Always"
    name = "Send an Email"

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = "#{Notification.Body.Text}"
            Octopus.Action.Email.Subject = "#{Notification.Subject.Text}"
            Octopus.Action.Email.ToTeamIds = "trident-notification"
            Octopus.Action.RunOnServer = "false"
        }
    }
}